// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.commands.AutonomousCommand;
import frc.robot.commands.RetractIntake;
import frc.robot.commands.ActivateIntake;
import frc.robot.commands.ShootHighSpeakerEnd;
import frc.robot.commands.ShootHighSpeakerStart;
import frc.robot.commands.ShootLowAmpEnd;
import frc.robot.commands.ShootLowAmpStart;
import frc.robot.commands.SpampIntake;
import frc.robot.subsystems.Acquisition;
import frc.robot.subsystems.Spamp;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Spamp m_spamp = new Spamp();
    public final Acquisition m_acquisition = new Acquisition();

// Joysticks
private final XboxController driver = new XboxController(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
private double speeds = 0.1;

  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    SmartDashboard.getNumber("Speed", speeds);
    
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


    // END AUTOGENERATEAD CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton btnSpampIntake = new JoystickButton(driver, XboxController.Button.kX.value);        
btnSpampIntake.whileTrue(new SpampIntake( m_spamp ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton btnEndAmp = new JoystickButton(driver, XboxController.Button.kLeftBumper.value);        
btnEndAmp.onFalse(new ShootLowAmpEnd( m_spamp ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton btnStartAmp = new JoystickButton(driver, XboxController.Button.kLeftBumper.value);        
btnStartAmp.onTrue(new ShootLowAmpStart( m_spamp ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton btnEndSpeaker = new JoystickButton(driver, XboxController.Button.kRightBumper.value);        
btnEndSpeaker.onFalse(new ShootHighSpeakerEnd( m_spamp ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton btnStartSpeaker = new JoystickButton(driver, XboxController.Button.kRightBumper.value);        
btnStartSpeaker.onTrue(new ShootHighSpeakerStart( m_spamp ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton btnRetractIntake = new JoystickButton(driver, XboxController.Button.kStart.value);        
btnRetractIntake.onFalse(new RetractIntake( m_acquisition ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton btnRunAcquisition = new JoystickButton(driver, XboxController.Button.kStart.value);        
btnRunAcquisition.onTrue(new ActivateIntake( m_acquisition ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getdriver() {
      return driver;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

