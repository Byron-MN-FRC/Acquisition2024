// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import com.revrobotics.CANSparkBase.IdleMode;
import com.revrobotics.CANSparkLowLevel.MotorType;
import com.revrobotics.CANSparkMax;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Aquisition extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax bottomShaft;
private CANSparkMax topShaft;
private DoubleSolenoid doubleSolenoid;
private DigitalInput limitSwitch;
private boolean triggercheck = false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Aquisition() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
bottomShaft = new CANSparkMax(20, MotorType.kBrushless);
 
 bottomShaft.restoreFactoryDefaults();  
bottomShaft.setInverted(false);
bottomShaft.setIdleMode(IdleMode.kCoast);
bottomShaft.burnFlash();
  

topShaft = new CANSparkMax(21, MotorType.kBrushless);
 
 topShaft.restoreFactoryDefaults();  
topShaft.setInverted(false);
topShaft.setIdleMode(IdleMode.kCoast);
topShaft.burnFlash();
  

doubleSolenoid = new DoubleSolenoid(10, PneumaticsModuleType.CTREPCM, 4, 5);
 addChild("doubleSolenoid", doubleSolenoid);
 

limitSwitch = new DigitalInput(0);
 addChild("limitSwitch", limitSwitch);
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    doubleSolenoid.set(Value.kReverse);
    }

    @Override
    public void periodic() {
        SmartDashboard.putBoolean("limitSwitch", isNoteCollected());
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void spinBoth(){
        if (isNoteCollected() || triggercheck) {
            bottomShaft.set(0);
            topShaft.set(0);
            doubleSolenoid.set(Value.kReverse);  
        } else {
            bottomShaft.setInverted(true);
            bottomShaft.set(SmartDashboard.getNumber("Speed", .1));
            topShaft.set(SmartDashboard.getNumber("Speed", .1));
            doubleSolenoid.set(Value.kForward);
        }
        
    }

    public void stopBoth(){
        bottomShaft.set(0);
        topShaft.set(0);
        doubleSolenoid.set(Value.kReverse);
    }


    boolean isNoteCollected() {
        if (!limitSwitch.get()){
            triggercheck = true;
        }
        return !limitSwitch.get();
    }
    public boolean finished() {
        return isNoteCollected();
    }
}

