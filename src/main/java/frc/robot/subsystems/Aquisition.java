// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Aquisition extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private DoubleSolenoid intakeSolenoid;
private DigitalInput noteDetectorAquisition;
private DigitalInput intakeInSwitch;
private DigitalInput intakeOutSwitch;
private PWMSparkMax bottomShaft;
private PWMSparkMax topShaft;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private boolean hasNote = false;
    private double intakeGearRatio = Constants.MaxRPMConstants.maxRPMNeo550 / 7;
    public double bottomShaftSpeed;
    public double topShaftSpeed;

    /**
    *
    */
    public Aquisition() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
intakeSolenoid = new DoubleSolenoid(20, PneumaticsModuleType.REVPH, 5, 4);
 addChild("intakeSolenoid", intakeSolenoid);
 

noteDetectorAquisition = new DigitalInput(1);
 addChild("noteDetectorAquisition", noteDetectorAquisition);
 

intakeInSwitch = new DigitalInput(0);
 addChild("intakeInSwitch", intakeInSwitch);
 

intakeOutSwitch = new DigitalInput(9);
 addChild("IntakeOutSwitch", intakeOutSwitch);
 

bottomShaft = new PWMSparkMax(0);
 addChild("bottomShaft",bottomShaft);
 bottomShaft.setInverted(false);

topShaft = new PWMSparkMax(1);
 addChild("topShaft",topShaft);
 topShaft.setInverted(false);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // topShaft.setSmartCurrentLimit(20);
        // bottomShaft.setSmartCurrentLimit(20);
        intakeSolenoid.set(Value.kReverse);
    }

    @Override
    public void periodic() {
        SmartDashboard.putBoolean("isNoteInAquisition", isNoteInAquisition());
        SmartDashboard.putBoolean("Intake Retracted", isIntakeRetracted());
        SmartDashboard.putBoolean("Intake Out", isIntakeOut());
        // This method will be called once per scheduler run
        if (isIntakeRetracted()) {
            if (isNoteInAquisition()) {
                spinBoth();
            } else {
                stopBoth();

            }
        }

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void deployIntake() {
        hasNote = false;
        intakeSolenoid.set(Value.kForward);
    }

    public void retractIntake() {
        intakeSolenoid.set(Value.kReverse);
    }

    public void spinBoth() {
        if (hasNote && !readyToTransfer()) {
            stopBoth();
        } else {
            topShaftSpeed = SmartDashboard.getNumber("Top Shaft RPM", 120);
            bottomShaftSpeed = SmartDashboard.getNumber("Bottom Shaft RPM", 120);

            bottomShaft.set(bottomShaftSpeed / intakeGearRatio);
            topShaft.set(topShaftSpeed / intakeGearRatio);
        }
    }

    public void stopBoth() {
        bottomShaft.set(0);
        topShaft.set(0);
        intakeSolenoid.set(Value.kReverse);
    }

    public boolean readyToTransfer() {
        return isNoteInAquisition() && isIntakeRetracted();
    }

    boolean isNoteInAquisition() {
        if (noteDetectorAquisition.get()) {
            hasNote = true;
        }
        return noteDetectorAquisition.get();
    }

    boolean isIntakeRetracted() {
        return !intakeInSwitch.get();
    }

    boolean isIntakeOut() {
        return !intakeOutSwitch.get();
    }
}
